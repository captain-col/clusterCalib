Define the constant runtime parameters.  These are the parameters that
should not be looked up from a database.

Define the maximum length of a shaped pulse.  The exact value isn't
important, but should be considerably longer than a pulse.  There is a
trade off since smaller values will run slightly faster.

< clusterCalib.digitization.pulse = 20000 ns >

Define the maximum length of the impulse response function.  The exact
value isn't important as long as it is longer than the response function.
There is a trade off since smaller values will run slightly faster.

< clusterCalib.digitization.response = 20000 ns >

After the wire channels are calibrated, the output FADC signals are
analyzed for peaks.  Peaks found by the search are then examined to see if
they are consistent with a real peak.  These parameters control the peak
acceptance.  The charge is the charge value of the maximum sample in the
peak.  The area is the total estimated area of the peak.  The noise is the
number of RMS sigma above the random noise before peak sample is taken as
signal.

The minimum peak charge value of a peak candidate.  The units are in
collected electrons

< clusterCalib.peakSearch.charge.collection = 2000 electrons >
< clusterCalib.peakSearch.charge.induction = 2000 electrons >

The minimum area of a peak candidate.  The expectation is that a MIP will
create approximately 6000 thermal electrons per mm.  The units are in
collected electrons.

< clusterCalib.peakSearch.area.collection = 6000 electrons >
< clusterCalib.peakSearch.area.induction = 6000 electrons >

The FWHM of the narrowest real peak.  Peaks candidates that are narrower
than this are rejected.

< clusterCalib.peakSearch.width.collection = 0.5 us >
< clusterCalib.peakSearch.width.induction = 0.5 us >

Limit peaks that are close to the measured noise in the event.  If it's
less than this, it's assumed to be random noise.

< clusterCalib.peakSearch.noise = 2.0 >

The number of samples to skip when searching for wire hits.  This avoids a
problem with "FFT wrap around", and because of the trigger, there shouldn't
be hits there anyway.

< clusterCalib.peakSearch.endSkip = 500 >

Set the limit on how wide a time cluster can be before the cluster is split
into multiple hits.

< clusterCalib.peakSearch.rmsLimit = 4 ms >

Set the amount of time domain smoothing to be applied to the input signal
before applying the deconvolution.  The value controls the number of
"side-band" samples to use when smoothing a particular sample.  A value of
zero means no smoothing.

< clusterCalib.deconvolution.smoothing = 0 >

The background in the FFT is estimated assuming that the true signal
spectrum is "smooth".  Spikes are then filtered relative to this estimated
background times "spikePower".  A larger spikePower means more filtering.
This is disabled if it's negative.

< clusterCalib.deconvolution.spikePower = 1.0 >

The weight to be applied to the "power" in the noise model used by the
filter.  This should have a value "near" to one.

< clusterCalib.deconvolution.noisePower = 1.0 >

The pulse deconvolution will remove the baseline from the pulse.  The base
line is determined by runs of coherenceZone samples with fluctuations of
less that sigma*fluctuationCut.  The sigma is the sigma of the
sample-to-sample variations.  If the number of samples inside the coherence
zone that vary less than fluctuationCut is less than coherenceCut, then the
region is not considered baseline.

< clusterCalib.deconvolution.coherenceZone = 10 >
< clusterCalib.deconvolution.fluctuationCut = 3 >
< clusterCalib.deconvolution.coherenceCut = 10 >

The baseline can follow a random walk, but if the estimate gets more than
the this cut times the sigma of the baseline then assume it's actually
signal.

< clusterCalib.deconvolution.baselineCut = -1 >

The threshold for a PMT hit.  The PMT signals are calibrated so that the
integral of a 1 pe pulse is 1.0, so the peak is typically around 0.05, and
the noise level is around 0.005.

< clusterCalib.pmt.threshold = 0.2 >

The collection efficiency for each of the types of wires in the MC.  These
are used to tune the overall response of the wires (and should be 1.0)

< clusterCalib.mc.wire.collection.x = 1.0 > 
< clusterCalib.mc.wire.collection.v = 1.0 > 
< clusterCalib.mc.wire.collection.u = 1.0 > 

Define the activity filter to determine if an event should be run through
the full calibration and hit finding.  The filter can be turned on or off
by using the "-O filter" option from the clusterCalib command line.  The
required channels are the number of channels that must have activity.  The
required significance is the number of "sigma" a channel must be above the
base line to be considered active.  The minimum signal is the minimum
threshold in ADC counts to be considered active.

< clusterCalib.filter.requiredChannels = 6 >
< clusterCalib.filter.requiredSignificance = 7.0 >
< clusterCalib.filter.minimumSignal = 30 >
< clusterCalib.filter.maximumRequiredChannels = 500 >


